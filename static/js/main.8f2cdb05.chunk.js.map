{"version":3,"sources":["redux/messages/messages-actionTypes.js","components/Message/Message.jsx","redux/messages/messages-actions.js","components/Chat/Chat.jsx","App.js","redux/store.js","redux/messages/messages-reducer.js","index.js"],"names":["ADD_MESSAGE","DELETE_MESSAGE","connect","dispatch","addMessage","text","type","actionTypes","payload","messagesActions","message","setMessage","useState","className","onSubmit","e","preventDefault","trim","length","alert","value","onChange","target","state","messages","deleteMessage","onClick","innerHTML","map","idx","App","rootReducer","combineReducers","filter","store","createStore","composeWithDevTools","console","log","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQAAO,MAAMA,EAAc,eACdC,EAAiB,kB,kBC2CfC,kBAAQ,MAJKC,IAAD,CACzBC,WAAaC,GAASF,ECvCGE,KAAD,CACxBC,KAAMC,EACNC,QAASH,IDqCsBI,CAA2BJ,OAG7CH,EAvCf,YAAkC,IAAjB,WAAEE,GAAc,EAC/B,MAAOM,EAASC,GAAcC,mBAAS,IAiBvC,OACE,8BACE,uBAAMC,UAAU,UAAUC,SAjBJC,IAExB,GADAA,EAAEC,iBAC4B,IAA1BN,EAAQO,OAAOC,OAGjB,OAFAC,MAAM,kCACNR,EAAW,IAGbP,EAAWM,GACXC,EAAW,KAST,UACE,uBACES,MAAOV,EACPJ,KAAK,OACLe,SAVeN,IACrBJ,EAAWI,EAAEO,OAAOF,QAUdP,UAAU,kBAEZ,wBAAQP,KAAK,SAASO,UAAU,iBAAhC,0B,MEFOX,mBARUqB,IAAD,CACtBC,SAAUD,EAAMC,aAGUrB,IAAD,CACzBsB,cAAgBf,GAAYP,EDpBAO,KAAD,CAC3BJ,KAAMC,EACNC,QAASE,ICkB4BD,CAA8BC,OAGtDR,EA1Bf,YAA4C,IAA9B,SAAEsB,EAAF,cAAYC,GAAiB,EACzC,MAAMC,EAAWX,IACfU,EAAcV,EAAEO,OAAOK,YAGzB,OACE,qBAAId,UAAU,OAAd,UACE,oBAAIA,UAAU,aAAd,kBACCW,GACCA,EAASI,KAAI,CAAClB,EAASmB,IACrB,oBAAchB,UAAU,eAAea,QAASA,EAAhD,SACGhB,GADMmB,WCDJC,MATf,WACE,OACE,sBAAKjB,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,Q,kBCJN,MAAMkB,EAAcC,0BAAgB,CAClCR,SCH6B,WAAoC,IAAnCD,EAAkC,uDAA1B,IAAI,KAAEjB,EAAF,QAAQE,GAAc,uCAChE,OAAQF,GACN,KAAKC,EACH,MAAO,IAAIgB,EAAOf,GAEpB,KAAKD,EACH,OAAOgB,EAAMU,QAAQvB,GAAYA,IAAYF,IAE/C,QACE,OAAOe,MDDEW,MAFDC,sBAAYJ,EAAaK,iCEDvCC,QAAQC,IAAIJ,EAAMK,YAElBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUR,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJS,SAASC,eAAe,W","file":"static/js/main.8f2cdb05.chunk.js","sourcesContent":["export const ADD_MESSAGE = \"messages/Add\";\nexport const DELETE_MESSAGE = \"messages/Delete\";\n","import \"./Message.css\";\nimport * as messagesActions from \"../../redux/messages/messages-actions\";\nimport { connect } from \"react-redux\";\nimport { useState } from \"react\";\n\nfunction Message({ addMessage }) {\n  const [message, setMessage] = useState(\"\");\n\n  const handleAddMessage = (e) => {\n    e.preventDefault();\n    if (message.trim().length === 0) {\n      alert(\"Please enter your message\");\n      setMessage(\"\");\n      return;\n    }\n    addMessage(message);\n    setMessage(\"\");\n  };\n\n  const onInputChange = (e) => {\n    setMessage(e.target.value);\n  };\n\n  return (\n    <div>\n      <form className=\"Message\" onSubmit={handleAddMessage}>\n        <input\n          value={message}\n          type=\"text\"\n          onChange={onInputChange}\n          className=\"Message-input\"\n        />\n        <button type=\"submit\" className=\"Message-button\">\n          Send\n        </button>\n      </form>\n    </div>\n  );\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  addMessage: (text) => dispatch(messagesActions.addMessage(text)),\n});\n\nexport default connect(null, mapDispatchToProps)(Message);\n","import * as actionTypes from \"./messages-actionTypes\";\n\nexport const addMessage = (text) => ({\n  type: actionTypes.ADD_MESSAGE,\n  payload: text,\n});\n\nexport const deleteMessage = (message) => ({\n  type: actionTypes.DELETE_MESSAGE,\n  payload: message,\n});\n","import \"./Chat.css\";\nimport { connect } from \"react-redux\";\nimport * as messagesActions from \"../../redux/messages/messages-actions\";\n\nfunction Chat({ messages, deleteMessage }) {\n  const onClick = (e) => {\n    deleteMessage(e.target.innerHTML);\n  };\n\n  return (\n    <ul className=\"Chat\">\n      <h1 className=\"Chat-title\">Chat</h1>\n      {messages &&\n        messages.map((message, idx) => (\n          <li key={idx} className=\"Chat-message\" onClick={onClick}>\n            {message}\n          </li>\n        ))}\n    </ul>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  messages: state.messages,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  deleteMessage: (message) => dispatch(messagesActions.deleteMessage(message)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Chat);\n","import \"./App.css\";\nimport Message from \"./components/Message/Message\";\nimport Chat from \"./components/Chat/Chat\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Message />\n      <Chat />\n    </div>\n  );\n}\n\nexport default App;\n","import { createStore, combineReducers } from \"redux\";\nimport { messagesReducer } from \"../redux/messages/messages-reducer\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nconst rootReducer = combineReducers({\n  messages: messagesReducer,\n});\n\nconst store = createStore(rootReducer, composeWithDevTools());\n\nexport default store;\n","import * as actionTypes from \"./messages-actionTypes\";\n\nexport const messagesReducer = (state = [], { type, payload }) => {\n  switch (type) {\n    case actionTypes.ADD_MESSAGE:\n      return [...state, payload];\n\n    case actionTypes.DELETE_MESSAGE:\n      return state.filter((message) => message !== payload);\n\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\n\nconsole.log(store.getState());\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}